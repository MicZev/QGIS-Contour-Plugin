# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ContourGenerator
                                 A QGIS plugin
 Generates contours from point layer
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-04-24
        copyright            : (C) 2018 by Chris Crook
        email                : ccrook@linz.govt.nz
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Chris Crook'
__date__ = '2018-04-24'
__copyright__ = '(C) 2018 by Chris Crook'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os.path
from PyQt5.QtCore import QCoreApplication, QUrl
from PyQt5.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterExpression,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterString,
                       QgsProcessingParameterFeatureSink,
                       QgsWkbTypes)
from .ContourGenerator import ContourGenerator
from . import ContourMethod
from . import resources


def tr(string):
    return QCoreApplication.translate('Processing', string)

class ContourGeneratorAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OutputLayer = 'OutputLayer'
    InputLayer = 'InputLayer'
    InputField = 'InputField'
    ContourMethodName = 'ContourMethod'
    NContour= 'NContour'
    MinContourValue = 'MinContourValue'
    MaxContourValue = 'MaxContourValue'
    ContourInterval = 'ContourInterval'
    ContourLevels = 'ContourLevels'
    ContourType = 'ContourType'
    ExtendFilled = 'ExtendFilled'
    LabelDecimalPlaces = 'LabelDecimalPlaces'
    LabelTrimZeros = 'LabelTrimZeros'
    LabelUnits = 'LabelUnits'
    DiscardTolerance = 'DiscardTolerance'

    ContourTypeOptions=[tr('Contour lines'),tr('Filled contours')]
    ContourTypeValues=['line','filled']

    ExtendFilledOptions=[("Don't fill below or above contours"),tr("Fill beneath minimum contour"),tr("Fill above maximum contour"),tr("Fill below and above")]
    ExtendFilledValues=['none','below','above','both']

    def initAlgorithm(self, config):
        """
        A lot of parameters for the processing algorithm.  
        Would be cleaner to create a widget, at least for the contour 
        levels.
        """

        # Add the input point vector features source. 
        # geometry.

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.InputLayer,
                tr('Input point layer'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        # Define the field/expression to contour

        self.addParameter(
            QgsProcessingParameterExpression(
                self.InputField,
                tr('Value to contour'),
                parentLayerParameterName=self.InputLayer
            )
        )

        # Duplicate point radius - discards points if closer than
        # this to each other (approximately).  0 means don't discard

        self.addParameter(
            QgsProcessingParameterNumber(
                self.DiscardTolerance,
                tr('Discard duplicate point radius'),
                QgsProcessingParameterNumber.Double,
                minValue=0.0,
                defaultValue=0.0
                )
        )

        # Define the contour type

        self.addParameter(
            QgsProcessingParameterEnum(
                self.ContourType,
                tr("Contour type"),
                self.ContourTypeOptions
            ))

        self.addParameter(
            QgsProcessingParameterEnum(
                self.ExtendFilled,
                tr("Filled contour options"),
                self.ExtendFilledOptions
            ))

        # Define the contour level calculation method

        methods=ContourMethod.methods
        methodNames=[m.name for m in methods]

        self.addParameter(
            QgsProcessingParameterEnum(
                self.ContourMethodName,
                tr('Method used to calculate the contour levels'),
                methodNames
            ))

        self.addParameter(
            QgsProcessingParameterNumber(
                self.NContour,
                tr('Number (or max number) of contours'),
                defaultValue=20,
                minValue=1
            ))

        self.addParameter(
            QgsProcessingParameterNumber(
                self.MinContourValue,
                tr('Minimum contour level (omit to use data minimum)'),
                type=QgsProcessingParameterNumber.Double,
                optional=True
            ))

        self.addParameter(
            QgsProcessingParameterNumber(
                self.MaxContourValue,
                tr('Maximum contour level (omit to use data maximum)'),
                type=QgsProcessingParameterNumber.Double,
                optional=True
            ))

        self.addParameter(
            QgsProcessingParameterNumber(
                self.ContourInterval,
                tr('Contour interval'),
                QgsProcessingParameterNumber.Double,
                minValue=0.0,
                defaultValue=1.0
                ))

        self.addParameter(
            QgsProcessingParameterString(
                self.ContourLevels,
                tr('Contour levels'),
                multiLine=True,
                optional=True
                ))

        # Define label formatting - number of significant digits and 
        # whether trailiing zeros are trimmed.

        self.addParameter(
            QgsProcessingParameterNumber(
                self.LabelDecimalPlaces,
                tr('Label decimal places (-1 for auto)'),
                QgsProcessingParameterNumber.Integer,
                defaultValue=-1,
                minValue=-1,
                maxValue=10
                )
        )

        self.addParameter(
            QgsProcessingParameterBoolean(
                self.LabelTrimZeros,
                tr("Trim trailing zeros from labels"),
                False
            ))

        self.addParameter(
            QgsProcessingParameterBoolean(
                self.LabelTrimZeros,
                tr("Trim trailing zeros from labels"),
                False
            ))

        self.addParameter(
            QgsProcessingParameterString(
                self.LabelUnits,
                tr("Units to append to label values"),
                "",
                optional=True
            ))

        # Output layer for the contours

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OutputLayer,
                tr('Output layer')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):

        # Retrieve the contour parameters
        
        source = self.parameterAsSource(parameters, self.InputLayer, context)
        field = self.parameterAsExpression( parameters, self.InputField, context )
        discardTolerance = self.parameterAsDouble( parameters, self.DiscardTolerance, context )
        
        methodid = self.parameterAsEnum( parameters, self.ContourMethodName, context)
        ncontour = self.parameterAsInt( parameters, self.NContour, context )
        zmin=None
        zmax=None
        if parameters[self.MinContourValue] is not None:
            zmin = self.parameterAsDouble( parameters, self.MinContourValue, context )
        if parameters[self.MaxContourValue] is not None:
            zmax = self.parameterAsDouble( parameters, self.MaxContourValue, context )
        interval = self.parameterAsDouble( parameters, self.ContourInterval, context )
        levels = self.parameterAsString( parameters, self.ContourLevels, context )

        contourtypeid = self.parameterAsEnum( parameters, self.ContourType, context )
        contourtype = self.ContourTypeValues[contourtypeid]
        extendfilledid = self.parameterAsEnum( parameters, self.ExtendFilled, context )
        extendfilled = self.ExtendFilledValues[extendfilledid]
        labelndp = self.parameterAsInt( parameters, self.LabelDecimalPlaces, context )
        labeltrim = self.parameterAsBool( parameters, self.LabelTrimZeros, context )
        labelunits = self.parameterAsString( parameters, self.LabelUnits, context )

        feedback.pushInfo('zmin {0}'.format(zmin))

        # Construct and configure the contour generator

        method=ContourMethod.methods[methodid].code

        params={
            'min':zmin,
            'max':zmax,
            'ncontour':ncontour,
            'maxcontour':ncontour,
            'interval':interval,
            'levels':levels
            }   

        generator=ContourGenerator(source,field,feedback)
        generator.setDiscardTolerance( discardTolerance )
        generator.setContourMethod( method, params )
        generator.setContourType( contourtype )
        generator.setExtendFilled( extendfilled )
        generator.setLabelFormat( labelndp, labeltrim, labelunits )

        isgridded=generator.isGridded()
        feedback.pushInfo("Contouring using {0}: {1}".format(method,params))

        # Create the destination layer

        wkbtype=generator.wkbtype()
        fields=generator.fields()
        crs=generator.crs()

        (sink, dest_id) = self.parameterAsSink(parameters, self.OutputLayer,
                context, fields, wkbtype, crs )

        # Add a feature in the sink

        for feature in generator.contourFeatures():
            sink.addFeature(feature, QgsFeatureSink.FastInsert)

        return {self.OutputLayer: dest_id}

    def icon(self):
        return QIcon(":/plugins/contour/contour.png")

    def name(self):
        return 'generatecontours`'

    def helpUrl(self):
        helpfile=os.path.splitext(os.path.realpath(__file__))[0]+'.html'
        if not os.path.exists(helpfile):
            return ''
        return QUrl.fromLocalFile(helpfile).toString(QUrl.FullyEncoded)

    def displayName(self):
        return tr('Generate Contours')

    def group(self):
        return tr('Contouring')

    def groupId(self):
        return 'contouring'

    def createInstance(self):
        return ContourGeneratorAlgorithm()
